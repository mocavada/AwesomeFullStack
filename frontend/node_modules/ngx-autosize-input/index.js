import { Directive, ElementRef, HostListener, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AutoSizeInputDirective = (function () {
    function AutoSizeInputDirective(element) {
        this.element = element;
        this.extraWidth = 0;
        this.includePlaceholder = true;
        this.includeBorders = false;
        this.includePadding = true;
        this.minWidth = -1;
        this.maxWidth = -1;
    }
    /**
     * @return {?}
     */
    AutoSizeInputDirective.prototype.onInput = /**
     * @return {?}
     */
    function () {
        this.adjustWidth();
    };
    /**
     * @return {?}
     */
    AutoSizeInputDirective.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        this.adjustWidth();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AutoSizeInputDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.adjustWidth();
    };
    /**
     * @return {?}
     */
    AutoSizeInputDirective.prototype.adjustWidth = /**
     * @return {?}
     */
    function () {
        if (this.includeBorders) {
            this.borderWidth = 2 * parseInt(window
                .getComputedStyle(this.element.nativeElement, '')
                .getPropertyValue('border'), 10);
        }
        else {
            this.borderWidth = 0;
        }
        if (this.includePadding) {
            this.paddingWidth = parseInt(window
                .getComputedStyle(this.element.nativeElement, '')
                .getPropertyValue('padding-left'), 10) +
                parseInt(window
                    .getComputedStyle(this.element.nativeElement, '')
                    .getPropertyValue('padding-right'), 10);
        }
        else {
            this.paddingWidth = 0;
        }
        var /** @type {?} */ inputText = this.element.nativeElement.value;
        var /** @type {?} */ placeHolderText = '';
        try {
            placeHolderText = this.element.nativeElement.placeholder;
        }
        catch (/** @type {?} */ error) {
            placeHolderText = '';
        }
        var /** @type {?} */ inputTextWidth = this.calculateTextWidth(inputText) + this.extraWidth + this.borderWidth + this.paddingWidth;
        // Min Width
        if (this.minWidth > 0 && (this.minWidth > inputTextWidth)) {
            this.setWidth(this.minWidth);
            return;
        }
        // Placeholder Width
        if (this.includePlaceholder && placeHolderText.length > 0 &&
            (this.calculateTextWidth(placeHolderText) > this.calculateTextWidth(inputText))) {
            this.setWidthByValue(placeHolderText);
            return;
        }
        // Max Width
        if (this.maxWidth > 0 && (this.maxWidth < inputTextWidth)) {
            this.setWidth(this.maxWidth);
            return;
        }
        this.setWidthByValue(inputText);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    AutoSizeInputDirective.prototype.calculateTextWidth = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var /** @type {?} */ style = this.getStyle(), /** @type {?} */
        canvas = document.createElement('canvas'), /** @type {?} */
        ctx = canvas.getContext('2d');
        ctx.font = style.fontStyle + " " + style.fontVariant + " " + style.fontWeight + " " + style.fontSize + " " + style.fontFamily;
        return /** @type {?} */ ((ctx)).measureText(value).width;
    };
    /**
     * @return {?}
     */
    AutoSizeInputDirective.prototype.getStyle = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ fontFamily = this.element.nativeElement.style.fontFamily ? this.element.nativeElement.style.fontFamily :
            window.getComputedStyle(this.element.nativeElement, '').getPropertyValue('font-family'), /** @type {?} */
        fontStyle = this.element.nativeElement.style.fontStyle ? this.element.nativeElement.style.fontStyle :
            window.getComputedStyle(this.element.nativeElement, '').getPropertyValue('font-style'), /** @type {?} */
        fontSize = this.element.nativeElement.style.fontSize ? this.element.nativeElement.style.fontSize :
            window.getComputedStyle(this.element.nativeElement, '').getPropertyValue('font-size'), /** @type {?} */
        fontVariant = this.element.nativeElement.style.fontSize ? this.element.nativeElement.style.fontSize :
            window.getComputedStyle(this.element.nativeElement, '').getPropertyValue('font-variant'), /** @type {?} */
        fontWeight = this.element.nativeElement.style.fontWeight ? this.element.nativeElement.style.fontWeight :
            window.getComputedStyle(this.element.nativeElement, '').getPropertyValue('font-weight');
        return { fontFamily: fontFamily, fontSize: fontSize, fontWeight: fontWeight, fontStyle: fontStyle, fontVariant: fontVariant };
    };
    /**
     * @param {?} width
     * @return {?}
     */
    AutoSizeInputDirective.prototype.setWidth = /**
     * @param {?} width
     * @return {?}
     */
    function (width) {
        this.element.nativeElement.style.width = width + 'px';
    };
    /**
     * @param {?} value
     * @return {?}
     */
    AutoSizeInputDirective.prototype.setWidthByValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.element.nativeElement.style.width =
            this.calculateTextWidth(value) +
                this.extraWidth +
                this.borderWidth +
                this.paddingWidth + 'px';
    };
    AutoSizeInputDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[AutoSizeInput]',
                },] },
    ];
    /** @nocollapse */
    AutoSizeInputDirective.ctorParameters = function () { return [
        { type: ElementRef, },
    ]; };
    AutoSizeInputDirective.propDecorators = {
        "extraWidth": [{ type: Input },],
        "includePlaceholder": [{ type: Input },],
        "includeBorders": [{ type: Input },],
        "includePadding": [{ type: Input },],
        "minWidth": [{ type: Input },],
        "maxWidth": [{ type: Input },],
        "onInput": [{ type: HostListener, args: ['input', ['$event.target'],] },],
    };
    return AutoSizeInputDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AutoSizeInputModule = (function () {
    function AutoSizeInputModule() {
    }
    AutoSizeInputModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        AutoSizeInputDirective,
                    ],
                    exports: [
                        AutoSizeInputDirective,
                    ]
                },] },
    ];
    /** @nocollapse */
    AutoSizeInputModule.ctorParameters = function () { return []; };
    return AutoSizeInputModule;
}());

export { AutoSizeInputModule, AutoSizeInputDirective };
